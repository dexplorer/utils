# github codespace init setup
# check image 
uname -a

# press tab for autocomplete in cmd line

# edit bash run command config file
vim ~/.bashrc

# add a new amd alias in bashrc profile file
vim ~/.bashrc
alias tmpTOP = 'cd /tmp'
<ESC> :wq to save

# check which python env is active
which python

# enter python shell in interactive mode
python
exit() to exit

# map python cmd to specific version of python 
vim ~/.bashrc
alias python="/usr/local/bin/python3.12"

# create python virtual env
python -m venv ~/.venv

# activate python virt env already setup in machine
vim ~/.bashrc
source ~/.venv/bin/activate

# apply bashrc edits to current session
source ~/.bashrc

# python setup install - installs packages and adds them to namespaces
python setup.py install 

# make file commands
make install
make all
make format
make test 

####
# git related
####

# git commands
# Let's say you have created a new repo on github. So the first step would be to clone the repo:git clone {Your Repo URL}

# You do your work, add some files, code etc., then push your changes with:

git status
git add .
git commit -m "first commit"
git push

# Now our changes are in main branch. Let's create a tag:

git tag v1.0.0                    # creates tag locally     
git push origin v1.0.0            # pushes tag to remote

# If you want to delete the tag:

git tag --delete v1.0.0           # deletes tag locally    
git push --delete origin v1.0.0   # deletes remote tag

# Discard unstaged changes
git checkout . 

# git diff commands

Depending on your exact situation, there are three useful ways to use git diff:

Show differences between index and working tree; that is, changes you haven't staged to commit:
git diff [filename]
Show differences between current commit and index; that is, what you're about to commit (--staged does exactly the same thing, use what you like):
git diff --cached [filename]
git diff --staged
Show differences between current commit and working tree:
git diff HEAD [filename]
git diff works recursively on directories, and if no paths are given, it shows all changes.

# git create new branch
git branch NEW_BRANCH_NAME 
or 
git -b NEW_BRANCH_NAME
or 
git --create NEW_BRANCH_NAME

# git create new branch and switch to it
git checkout -b NEW_BRANCH_NAME
or 
git switch --create NEW_BRANCH_NAME 
or 
git switch -c NEW_BRANCH_NAME

# git switch to branch 
git checkout BRANCH_NAME
or 
git switch BRANCH_NAME


# Merge changes in remote as well as local branches

Create a local dev branch, because then the full merge conflict resolution will let you fix the problem.

git checkout -b dev
git add .
git commit -m 'adding local changes'
git checkout main

Now use your regular git pull or git fetch workflow, possibly with stash. I like fetch best but your stash/pull should work too.

git stash # this is needed to stash away the changes temporarily
git pull

Then, before applying the stash, you should merge in dev, to apply the new file and fix the merge conflict

git merge dev # add --squash to avoid getting a bubble in your tree
# fix conflict and commit

####
# python venv related
####

# list packages installed in python venv
pip freeze --local
pip list --local

# remove packages installed in python venv
pip freeze | xargs pip uninstall -y
pip freeze --local | xargs pip uninstall -y

# get python command line options
python â€”help 

####
# python interpreter/shell
####

# enter shell
python

# exit shell 
exit()

####
# ipython notebook interpreter/shell
####

# enter shell
ipython

# exit shell 
exit()

####
# bash shell
####

# lookup bash manual for commands or anything
man bash | grep -C "$@"


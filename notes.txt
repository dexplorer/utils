# github codespace init setup
# check image 
uname -a

# press tab for autocomplete in cmd line

# edit bash run command config file
vim ~/.bashrc

# add a new amd alias in bashrc profile file
vim ~/.bashrc
alias tmpTOP = 'cd /tmp'
<ESC> :wq to save

# check which python env is active
which python

# enter python shell in interactive mode
python
exit() to exit

# map python cmd to specific version of python 
vim ~/.bashrc
alias python="/usr/local/bin/python3.12"

# create python virtual env
python -m venv ~/.venv

# activate python virt env already setup in machine
vim ~/.bashrc
source ~/.venv/bin/activate

# apply bashrc edits to current session
source ~/.bashrc

# make file commands
make install
make all
make format

# git commands
git status
git add .
git commit -m "init commit"
git push

# git diff commands

Depending on your exact situation, there are three useful ways to use git diff:

Show differences between index and working tree; that is, changes you haven't staged to commit:
git diff [filename]
Show differences between current commit and index; that is, what you're about to commit (--staged does exactly the same thing, use what you like):
git diff --cached [filename]
git diff --staged
Show differences between current commit and working tree:
git diff HEAD [filename]
git diff works recursively on directories, and if no paths are given, it shows all changes.

# git create new branch
git branch NEW_BRANCH_NAME 
or 
git -b NEW_BRANCH_NAME
or 
git --create NEW_BRANCH_NAME
or 
git --c NEW_BRANCH_NAME

# git create new branch and switch to it
git checkout -b NEW_BRANCH_NAME
or 
git switch --create NEW_BRANCH_NAME 
or 
git switch --c NEW_BRANCH_NAME

# git switch to branch 
git checkout BRANCH_NAME
or 
git switch BRANCH_NAME


# python venv related

# list packages installed in python venv
pip freeze --local
pip list --local

# remove packages installed in python venv
pip freeze | xargs pip uninstall -y
